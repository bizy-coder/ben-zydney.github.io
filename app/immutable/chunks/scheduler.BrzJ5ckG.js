function k(){}const M=t=>t;function w(t,n){for(const e in n)t[e]=n[e];return t}function j(t){return t()}function A(){return Object.create(null)}function E(t){t.forEach(j)}function B(t){return typeof t=="function"}function D(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}let f;function F(t,n){return t===n?!0:(f||(f=document.createElement("a")),f.href=n,t===f.href)}function P(t){return Object.keys(t).length===0}function q(t,...n){if(t==null){for(const o of n)o(void 0);return k}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function S(t,n,e){t.$$.on_destroy.push(q(n,e))}function U(t,n,e,o){if(t){const r=m(t,n,e,o);return t[0](r)}}function m(t,n,e,o){return t[1]&&o?w(e.ctx.slice(),t[1](o(n))):e.ctx}function G(t,n,e,o){if(t[2]&&o){const r=t[2](o(e));if(n.dirty===void 0)return r;if(typeof r=="object"){const l=[],d=Math.max(n.dirty.length,r.length);for(let s=0;s<d;s+=1)l[s]=n.dirty[s]|r[s];return l}return n.dirty|r}return n.dirty}function H(t,n,e,o,r,l){if(r){const d=m(n,e,o,l);t.p(d,r)}}function I(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let o=0;o<e;o++)n[o]=-1;return n}return-1}let _;function h(t){_=t}function i(){if(!_)throw new Error("Function called outside component initialization");return _}function J(t){i().$$.on_mount.push(t)}function K(t){i().$$.after_update.push(t)}function L(t){i().$$.on_destroy.push(t)}function N(t,n){return i().$$.context.set(t,n),n}function Q(t){return i().$$.context.get(t)}const a=[],b=[];let u=[];const y=[],x=Promise.resolve();let g=!1;function v(){g||(g=!0,x.then(O))}function R(){return v(),x}function C(t){u.push(t)}const p=new Set;let c=0;function O(){if(c!==0)return;const t=_;do{try{for(;c<a.length;){const n=a[c];c++,h(n),z(n.$$)}}catch(n){throw a.length=0,c=0,n}for(h(null),a.length=0,c=0;b.length;)b.pop()();for(let n=0;n<u.length;n+=1){const e=u[n];p.has(e)||(p.add(e),e())}u.length=0}while(a.length);for(;y.length;)y.pop()();g=!1,p.clear(),h(t)}function z(t){if(t.fragment!==null){t.update(),E(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(C)}}function T(t){const n=[],e=[];u.forEach(o=>t.indexOf(o)===-1?n.push(o):e.push(o)),e.forEach(o=>o()),u=n}export{v as A,F as B,L as C,G as a,q as b,U as c,S as d,K as e,b as f,I as g,N as h,B as i,Q as j,C as k,M as l,A as m,k as n,J as o,O as p,P as q,E as r,D as s,R as t,H as u,T as v,_ as w,h as x,j as y,a as z};
